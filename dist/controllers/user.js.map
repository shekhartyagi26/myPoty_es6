{"version":3,"sources":["../../src/controllers/user.js"],"names":["UserController","create","req","res","body","userName","fullName","mobileNumber","profilePicture","password","profession","website","age","bio","email","checkBlank","then","data","console","log","findOne","users","catch","err","login","json","Error","message","controller"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEaA,c,WAAAA,c;;;;;;;;;;;;;;0MAETC,M,GAAS,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,4BACwFD,IAAIE,IAD5F;AAAA,gBACbC,QADa,aACbA,QADa;AAAA,gBACHC,QADG,aACHA,QADG;AAAA,gBACOC,YADP,aACOA,YADP;AAAA,gBACqBC,cADrB,aACqBA,cADrB;AAAA,gBACqCC,QADrC,aACqCA,QADrC;AAAA,gBAC+CC,UAD/C,aAC+CA,UAD/C;AAAA,gBAC2DC,OAD3D,aAC2DA,OAD3D;AAAA,gBACoEC,GADpE,aACoEA,GADpE;AAAA,gBACyEC,GADzE,aACyEA,GADzE;AAAA,gBAC8EC,KAD9E,aAC8EA,KAD9E;;AAEnB,mCAAaC,UAAb,CAAwB,CAACV,QAAD,EAAWC,QAAX,EAAqBC,YAArB,EAAmCC,cAAnC,EAAmDC,QAAnD,EAA6DC,UAA7D,EAAyEC,OAAzE,EAAkFC,GAAlF,EAAuFC,GAAvF,EAA4FC,KAA5F,CAAxB,EACKE,IADL,CACU,UAACC,IAAD,EAAU;AACZA,uBAAO,EAAEH,OAAOA,KAAT,EAAP;AACAI,wBAAQC,GAAR,CAAYF,IAAZ,EAAiB,WAAjB;AACA,+BAAKG,OAAL,CAAalB,IAAImB,KAAjB,EAAwBJ,IAAxB,EACKD,IADL,CACU,UAACC,IAAD,EAAU;AACZC,4BAAQC,GAAR,CAAYF,IAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,iBAbL,EAaOK,KAbP,CAaa,UAACC,GAAD,EAAS;AACdL,4BAAQC,GAAR,CAAYI,GAAZ;AACA;AACH,iBAhBL;AAiBH,aArBL,EAqBOD,KArBP,CAqBa,UAACC,GAAD,EAAS;AACdL,wBAAQC,GAAR,CAAYI,GAAZ,EAAgB,WAAhB;AACA;AACH,aAxBL;AAyBH,S,QAGDC,K,GAAQ,UAACtB,GAAD,EAAMC,GAAN,EAAc;AAClB,mCAAaY,UAAb,CAAwB,CAACN,QAAD,EAAWK,KAAX,CAAxB,EACKE,IADL,CACU,UAACC,IAAD,EAAU;AACZA,uBAAO,EAAEH,OAAOZ,IAAIY,KAAb,EAAoBL,UAAUP,IAAIO,QAAlC,EAAP;AACA,+BAAKW,OAAL,CAAalB,IAAImB,KAAjB,EAAwBJ,IAAxB,EACKD,IADL,CACU,UAACC,IAAD,EAAU;AACZd,wBAAIsB,IAAJ,CAAS,EAAER,UAAF,EAAT;AACH,iBAHL,EAGOK,KAHP,CAGa,UAACC,GAAD,EAAS;AACd,0BAAM,IAAIG,KAAJ,CAAUvB,IAAIsB,IAAJ,CAAS,GAAT,EAAc,EAAEE,SAASJ,GAAX,EAAd,CAAV,CAAN;AACH,iBALL;AAMH,aATL,EASOD,KATP,CASa,UAACC,GAAD,EAAS;AACd,sBAAM,IAAIG,KAAJ,CAAUvB,IAAIsB,IAAJ,CAAS,GAAT,EAAc,EAAEE,SAASJ,GAAX,EAAd,CAAV,CAAN;AACH,aAXL;AAYH,S;;AA5CD;;;AA8BA;;;;;;AAiBJ,IAAMK,aAAa,IAAI5B,cAAJ,EAAnB;kBACe4B,U","file":"user.js","sourcesContent":["import BaseAPIController from \"./BaseAPIController\";\nimport UserProvider from \"../providers/UserProvider.js\";\nimport User from \"../models/User.js\";\n\nexport class UserController extends BaseAPIController {\n    /* Controller for User Register  */\n    create = (req, res) => {\n        let { userName, fullName, mobileNumber, profilePicture, password, profession, website, age, bio, email } = req.body;\n        UserProvider.checkBlank([userName, fullName, mobileNumber, profilePicture, password, profession, website, age, bio, email])\n            .then((data) => {\n                data = { email: email };\n                console.log(data,'+++++++++')\n                User.findOne(req.users, data)\n                    .then((data) => {\n                        console.log(data)\n                        // if (!data) {\n                        //     User.create(req.users, userName, fullName, mobileNumber, profilePicture, password, profession, website, age, bio)\n                        //         .then((data) => {\n                        //             res.json({ data })\n                        //         }, (err) => {\n                        //             throw new Error(res.json(400, { message: err }));\n                        //         })\n                        // } else {\n                        //     throw new Error(res.json(400, { message: 'email id already exist' }));\n                        // }\n                    }).catch((err) => {\n                        console.log(err)\n                        // throw new Error(res.json(400, { message: err }));\n                    })\n            }).catch((err) => {\n                console.log(err,'=========')\n                // throw new Error(res.json(400, { message: err }))\n            })\n    }\n\n    /* Controller for User Login  */\n    login = (req, res) => {\n        UserProvider.checkBlank([password, email])\n            .then((data) => {\n                data = { email: req.email, password: req.password }\n                User.findOne(req.users, data)\n                    .then((data) => {\n                        res.json({ data })\n                    }).catch((err) => {\n                        throw new Error(res.json(400, { message: err }));\n                    })\n            }).catch((err) => {\n                throw new Error(res.json(400, { message: err }))\n            })\n    }\n}\n\nconst controller = new UserController();\nexport default controller;"]}